/*
 * Copyright (C) 2017 The Apposcopy and Astroid Authors
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
package com.apposcopy.analyses;


import java.io.File;
import java.io.FileWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.List;

import shord.project.ClassicProject;
import shord.project.analyses.JavaAnalysis;
import shord.project.analyses.ProgramRel;
import soot.SootMethod;
import chord.bddbddb.Rel.RelView;
import chord.project.Chord;
import chord.project.Config;
import chord.util.tuple.object.Pair;
import chord.util.tuple.object.Quad;

import com.apposcopy.model.Sample;
import com.google.gson.Gson;


/**
  * Given an app, deciding its family.
  * @author Yu Feng
  **/

@Chord(name="apposcopy-java")

public class Malware extends JavaAnalysis
{

    protected String belongTo;

    protected String id;

    /* Activity components */
    protected List<String> activities = new ArrayList<>();

    /* Service components */
    protected List<String> services  = new ArrayList<>();

    /* Receiver components */
    protected List<String> receivers  = new ArrayList<>();

    protected List<Pair<String, String>> iccg  = new ArrayList<>();

    protected List<Pair<String, String>> intentFilters  = new ArrayList<>();

    protected List<Pair<String, String>> dangerAPIs  = new ArrayList<>();

    protected List<Quad<String, String, String, String>> taintFlows  = new ArrayList<>();

	public void run() {
        List<String> family = new ArrayList<String>();
	    ProgramRel relAdrd = (ProgramRel) ClassicProject.g().getTrgt("ADRD");
	    ProgramRel relAnserverBot = (ProgramRel) ClassicProject.g().getTrgt("AnserverBot");
	    ProgramRel relBaseBridge = (ProgramRel) ClassicProject.g().getTrgt("BaseBridge");
	    ProgramRel relBeanBot = (ProgramRel) ClassicProject.g().getTrgt("BeanBot");
	    ProgramRel relBgserv = (ProgramRel) ClassicProject.g().getTrgt("Bgserv");
	    ProgramRel relCoinPirate = (ProgramRel) ClassicProject.g().getTrgt("CoinPirate");
	    ProgramRel relDroidCoupon = (ProgramRel) ClassicProject.g().getTrgt("DroidCoupon");
	    ProgramRel relDroidDream = (ProgramRel) ClassicProject.g().getTrgt("DroidDream");
	    ProgramRel relDroidDreamLight = (ProgramRel) ClassicProject.g().getTrgt("DroidDreamLight");
	    ProgramRel relDroidKf1 = (ProgramRel) ClassicProject.g().getTrgt("DroidKungFu1");
	    ProgramRel relDroidKf2 = (ProgramRel) ClassicProject.g().getTrgt("DroidKungFu2");
	    ProgramRel relDroidKf3 = (ProgramRel) ClassicProject.g().getTrgt("DroidKungFu3");
	    ProgramRel relDroidKf4 = (ProgramRel) ClassicProject.g().getTrgt("DroidKungFu4");
	    ProgramRel relGeinimi = (ProgramRel) ClassicProject.g().getTrgt("Geinimi");
	    ProgramRel relGM = (ProgramRel) ClassicProject.g().getTrgt("GingerMaster");
	    ProgramRel relGoldDream= (ProgramRel) ClassicProject.g().getTrgt("GoldDream");
	    ProgramRel relPJapps = (ProgramRel) ClassicProject.g().getTrgt("PJapps");
	    ProgramRel relJSMS = (ProgramRel) ClassicProject.g().getTrgt("jSMSHider");

		relAdrd.load();
        if(relAdrd.size() > 0)
            family.add("ADRD");

		relAnserverBot.load();
        if(relAnserverBot.size() > 0)
            family.add("AnserverBot");

		relBaseBridge.load();
        if(relBaseBridge.size() > 0)
            family.add("BaseBridge");

		relBeanBot.load();
        if(relBeanBot.size() > 0)
            family.add("BeanBot");
	    
		relBgserv.load();
        if(relBgserv.size() > 0)
            family.add("Bgserv");

		relCoinPirate.load();
        if(relCoinPirate.size() > 0)
            family.add("CoinPirate");

		relDroidCoupon.load();
        if(relDroidCoupon.size() > 0)
            family.add("DroidCoupon");

		relDroidDream.load();
        if(relDroidDream.size() > 0)
            family.add("DroidDream");

		relDroidDreamLight.load();
        if(relDroidDreamLight.size() > 0)
            family.add("DroidDreamLight");

		relDroidKf1.load();
        if(relDroidKf1.size() > 0)
            family.add("DroidKungFu1");

		relDroidKf2.load();
        if(relDroidKf2.size() > 0)
            family.add("DroidKungFu2");

		relDroidKf3.load();
        if(relDroidKf3.size() > 0)
            family.add("DroidKungFu3");


		relDroidKf4.load();
        if(relDroidKf4.size() > 0)
            family.add("DroidKungFu4");

		relGeinimi.load();
        if(relGeinimi.size() > 0)
            family.add("Geinimi");

		relGM.load();
        if(relGM.size() > 0)
            family.add("GingerMaster");

		relGoldDream.load();
        if(relGoldDream.size() > 0)
            family.add("GoldDream");

		relPJapps.load();
        if(relPJapps.size() > 0)
            family.add("Pjapps");

		relJSMS.load();
        if(relJSMS.size() > 0)
            family.add("jSMSHider");
        ///////////////
        relAdrd.close();
        relAnserverBot.close();
        relBaseBridge.close();
        relBeanBot.close();
        relBgserv.close();
        relCoinPirate.close();
        relDroidCoupon.close();
        relDroidDream.close();
        relDroidDreamLight.close();
        relDroidKf1.close();
        relDroidKf2.close();
        relDroidKf3.close();
        relDroidKf4.close();
        relGeinimi.close();
        relGM.close();
        relGoldDream.close();
        relPJapps.close();
        relJSMS.close();
        String malStr = family.toString();
        malStr = malStr.replaceAll("\\s+","");
        System.out.println("-----------Malware family=: " + malStr);
        //store family name
        belongTo = malStr;

        dumpJson();
	}


    public void dumpJson() {
        System.out.println("Begin to output Json file: ");
        //Activity
        ProgramRel relAct = (ProgramRel) ClassicProject.g().getTrgt("Activity");
        relAct.load();
        RelView viewAct = relAct.getView();
        Iterable<String> resAct = viewAct.getAry1ValTuples();
        for (String comp : resAct) {
            activities.add(comp);
        }
        //Service
        ProgramRel relServ = (ProgramRel) ClassicProject.g().getTrgt("Service");
        relServ.load();
        RelView viewServ = relServ.getView();
        Iterable<String> resServ = viewServ.getAry1ValTuples();
        for (String comp : resServ) {
            services.add(comp);
        }
        //Receiver
        ProgramRel relRecv = (ProgramRel) ClassicProject.g().getTrgt("Receiver");
        relRecv.load();
        RelView viewRecv = relRecv.getView();
        Iterable<String> resRecv = viewRecv.getAry1ValTuples();
        for (String comp : resRecv) {
            receivers.add(comp);
        }
        //ICCG
        ProgramRel relICCG = (ProgramRel) ClassicProject.g().getTrgt("ICCG");
        relICCG.load();
        RelView viewICCG = relICCG.getView();
        Iterable<Pair<String, String>> resICCG = viewICCG.getAry2ValTuples();
        for (Pair<String, String> edge : resICCG) {
            iccg.add(edge);
        }

        //Dangerous APIs
        ProgramRel relSpecCall = (ProgramRel) ClassicProject.g().getTrgt("SpecCallerComp");
        relSpecCall.load();
        RelView viewSpecCall = relSpecCall.getView();
        Iterable<Pair<SootMethod, String>> resSpecCall = viewSpecCall
                .getAry2ValTuples();
        for (Pair<SootMethod, String> spec : resSpecCall) {
            String methSig = spec.val0.getSignature();
            Pair<String, String> specPair = new Pair<String, String>(spec.val1, methSig);
            dangerAPIs.add(specPair);
        }

        //Intent Filters
        ProgramRel relCIA = (ProgramRel) ClassicProject.g().getTrgt("CompIntentAction");
        relCIA.load();
        RelView viewCIA = relCIA.getView();
        Iterable<Pair<String, String>> resCIA = viewCIA.getAry2ValTuples();
        for (Pair<String, String> intentFilter : resCIA) {
            intentFilters.add(intentFilter);
        }
        //Taint flows
        ProgramRel relFlowComp = (ProgramRel) ClassicProject.g().getTrgt("SrcSinkComp");
        relFlowComp.load();
        RelView viewFlowComp = relFlowComp.getView();
        Iterable<Quad<String, String, String, String>> resFlowComp = viewFlowComp
                .getAry4ValTuples();
        for (Quad<String, String, String, String> taint : resFlowComp) {
            taintFlows.add(taint);
        }

        // dump to json.
        Sample sam = new Sample();
        sam.setFamily(belongTo);
        sam.setActivities(activities);
        sam.setServices(services);
        sam.setReceivers(receivers);
        sam.setIccg(iccg);
        sam.setIntentFilters(intentFilters);
        sam.setDangerAPIs(dangerAPIs);
        sam.setTaintFlows(taintFlows);
        if(taintFlows.isEmpty()) {
            System.out.println("[UNSOUND]");
        }

		Gson gson = new Gson();
		String json = gson.toJson(sam);
		System.out.println("Config work:" + Config.workDirName);
		System.out.println("json--------------: " + json);
		String path = Config.workDirName;
		String[] arr = path.split("_");
		assert arr.length > 0 : "invalid path";
		String name = arr[arr.length - 1];
		if(name.contains(".")) {
			name = name.substring(0, name.indexOf('.'));
		}
		name += ".json";
		saveToFile(path + "/" + name, json);
    }
    
	public void saveToFile(String path, String content) {
		try {
			File file = new File(path);
			FileWriter fileWriter = new FileWriter(file);
			fileWriter.write(content);
			fileWriter.flush();
			fileWriter.close();
		} catch (IOException e) {
			e.printStackTrace();
		}
	}

}
